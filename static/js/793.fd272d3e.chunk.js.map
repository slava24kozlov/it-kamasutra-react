{"version":3,"file":"static/js/793.fd272d3e.chunk.js","mappings":"gPACA,EAAuB,uB,6BC6EvB,EA1D8C,SAAC,GASzC,IAPEA,EAOH,EAPGA,aACAC,EAMH,EANGA,YACAC,EAKH,EALGA,aACAC,EAIH,EAJGA,YACAC,EAGH,EAHGA,YACAC,EAEH,EAFGA,WAGJ,GAAiCC,EAAAA,EAAAA,MAA1BC,EAAP,EAAOA,SAAUC,EAAjB,EAAiBA,aAEXC,EAAe,SAACC,GAClBP,EAAYO,EAAMC,OAAOC,KAAMF,EAAMC,OAAOE,QAQhD,OACI,SAAC,IAAD,CAASC,MAAM,UAAf,UACI,iBAAKC,UAAWC,EAAhB,WACI,8BACI,4BACA,2BACI,mCACA,2CAGJ,2BACChB,EAAaiB,KAAI,gBAAEC,EAAF,EAAEA,IAAKN,EAAP,EAAOA,KAAMO,EAAb,EAAaA,MAAOC,EAApB,EAAoBA,QAApB,OACd,2BACI,2BAAI,gBAAKC,IAAKF,EAAOG,IAAG,iBAAYV,GAAQW,MAAM,KAAKC,OAAO,QAAM,0BAAOZ,QAC3E,wBAAKQ,MAFAF,YAOjB,kBAAMO,GAAG,eAAeC,SAAUlB,GAxB7B,SAAC,GAAkD,IAAjDmB,EAAgD,EAAhDA,OAAQP,EAAwC,EAAxCA,QACvBf,EAAWsB,EAAQP,GACnBhB,OAsBQ,WACI,uCACQG,EAAS,SAAU,CAACqB,SAAU,oBADtC,IAEIC,SAAUpB,EACVI,MAAOZ,EACP6B,YAAY,iBAChB,uCACQvB,EAAS,UAAW,CAACqB,SAAU,oBADvC,IAEIC,SAAUpB,EACVI,MAAOX,EACP4B,YAAY,oBAChB,mBAAQC,KAAK,SAASC,UAAW/B,IAAgBC,EAAjD,4BCpEP+B,EAAkB,SAACC,GAAD,OAC7BA,EAAMC,aAAaC,M,oBCKfC,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAAA,IAAAA,MAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,UAAAA,GAiBD,OAjBCA,EAAAA,EAAAA,KAAAA,MAAAA,EAAAA,CAAAA,MAAAA,OAAAA,KACFH,MAAQ,CACJP,OAAQ,GACRP,QAAS,IAFL,EAKRkB,YAAc,SAACC,EAAe1B,GAC1B,EAAK2B,UAAL,UACKD,EAAQ1B,KAEhB,EAED4B,WAAa,WACT,EAAKD,SAAS,CACVb,OAAQ,GACRP,QAAS,MAEhB,EAWA,OAXA,8BAED,WACI,OAAO,SAAC,EAAD,CACHnB,YAAayC,KAAKR,MAAMP,OACxBzB,aAAcwC,KAAKR,MAAMd,QACzBjB,YAAauC,KAAKJ,YAClBlC,YAAasC,KAAKD,WAClBzC,aAAc0C,KAAKC,MAAM3C,aACzBK,WAAYqC,KAAKC,MAAMtC,iBAE9B,EA5BCgC,CAA0BO,EAAAA,WAmC1BC,GAAYC,EAAAA,EAAAA,KAJM,SAACZ,GAAD,MAA0B,CAC9ClC,aAAciC,EAAgBC,MAGS,CAAC7B,WAAY0C,EAAAA,EAAAA,aACxD,GAAeC,EAAAA,EAAAA,IAAQH,EAAWI,EAAAA,EAAlC,CAAsEZ","sources":["webpack://my-app/./src/components/Messages/Messages.module.scss?b126","components/Messages/Messages.tsx","redux/selectors/MessagesSelectors.ts","components/Messages/MessagesContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"main\":\"Messages_main__6WYDK\"};","import React from \"react\";\r\nimport style from \"./Messages.module.scss\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport Wrapper from \"../common/Wrappers/WrapperComponents\";\r\nimport {MessagesStateType} from \"../../redux/reducer/MessagesReducer\";\r\n\r\ntype PropsMessagesType = {\r\n    dataMessages: MessagesStateType[\"data\"]\r\n    fieldDialog: string\r\n    fieldMessage: string\r\n    updateField: (field: string, value: string) => void\r\n    resetFields: () => void\r\n    setMessage: (field: string, value: string) => void\r\n}\r\n\r\ntype useFormMessagesType = {\r\n    dialog: string\r\n    message: string\r\n}\r\n\r\nconst Messages: React.FC<PropsMessagesType> = (\r\n    {\r\n        dataMessages,\r\n        fieldDialog,\r\n        fieldMessage,\r\n        updateField,\r\n        resetFields,\r\n        setMessage\r\n    }\r\n) => {\r\n    const {register, handleSubmit} = useForm<useFormMessagesType>();\r\n\r\n    const handleChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n        updateField(event.target.name, event.target.value);\r\n    };\r\n\r\n    const onSubmit = ({dialog, message}: useFormMessagesType): void => {\r\n        setMessage(dialog, message);\r\n        resetFields();\r\n    };\r\n\r\n    return (\r\n        <Wrapper title=\"DIALOGS\">\r\n            <div className={style.main}>\r\n                <table>\r\n                    <thead>\r\n                    <tr>\r\n                        <th>Users</th>\r\n                        <th>Messages</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {dataMessages.map(({key, name, image, message}) =>\r\n                        <tr key={key}>\r\n                            <td><img src={image} alt={`avatar ${name}`} width=\"25\" height=\"25\"/><span>{name}</span></td>\r\n                            <td>{message}</td>\r\n                        </tr>)}\r\n                    </tbody>\r\n                </table>\r\n\r\n                <form id=\"messagesForm\" onSubmit={handleSubmit(onSubmit)}>\r\n                    <textarea\r\n                        {...register(\"dialog\", {required: \"field is empty\"})}\r\n                        onChange={handleChange}\r\n                        value={fieldDialog}\r\n                        placeholder=\"Enter name\"/>\r\n                    <textarea\r\n                        {...register(\"message\", {required: \"field is empty\"})}\r\n                        onChange={handleChange}\r\n                        value={fieldMessage}\r\n                        placeholder=\"Enter message\"/>\r\n                    <button type=\"submit\" disabled={!fieldDialog || !fieldMessage}>Click</button>\r\n                </form>\r\n            </div>\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nexport default Messages;\r\n","import {AppStateType} from \"../store\";\r\nimport {MessagesStateType} from \"../reducer/MessagesReducer\";\r\n\r\nexport const getDataMessages = (state: AppStateType): MessagesStateType[\"data\"] => (\r\n  state.messagesPage.data\r\n);\r\n","import React from \"react\";\r\nimport {actionCreators} from \"../../redux/reducer/MessagesReducer\";\r\nimport {connect, ConnectedProps} from \"react-redux\";\r\nimport Messages from \"./Messages\";\r\nimport {getDataMessages} from \"../../redux/selectors/MessagesSelectors\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport { WithAuthRedirect } from \"../../hoc/WithAuthRedirect\";\r\n\r\nclass MessagesContainer extends React.Component<ConnectedProps<typeof connector>> {\r\n    state = {\r\n        dialog: \"\" as string,\r\n        message: \"\" as string,\r\n    };\r\n\r\n    updateState = (field: string, value: string) => {\r\n        this.setState({\r\n            [field]: value\r\n        });\r\n    };\r\n\r\n    resetState = () => {\r\n        this.setState({\r\n            dialog: \"\",\r\n            message: \"\",\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return <Messages\r\n            fieldDialog={this.state.dialog}\r\n            fieldMessage={this.state.message}\r\n            updateField={this.updateState}\r\n            resetFields={this.resetState}\r\n            dataMessages={this.props.dataMessages}\r\n            setMessage={this.props.setMessage}\r\n        />;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    dataMessages: getDataMessages(state),\r\n});\r\n\r\nconst connector = connect(mapStateToProps, {setMessage: actionCreators.setMessage});\r\nexport default compose(connector, WithAuthRedirect<typeof connector>)(MessagesContainer) as React.ComponentType;\r\n\r\n\r\n"],"names":["dataMessages","fieldDialog","fieldMessage","updateField","resetFields","setMessage","useForm","register","handleSubmit","handleChange","event","target","name","value","title","className","style","map","key","image","message","src","alt","width","height","id","onSubmit","dialog","required","onChange","placeholder","type","disabled","getDataMessages","state","messagesPage","data","MessagesContainer","updateState","field","setState","resetState","this","props","React","connector","connect","actionCreators","compose","WithAuthRedirect"],"sourceRoot":""}